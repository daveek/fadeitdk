[
  {
    "id": "testing-express-couchdb-apps-with-mock-couch",
    "title": "Testing Express.js+CouchDB Applications with mock-couch",
    "intro": "There's a way to test Express.js+CouchDB web apps with confidence of end-to-end tests and execution speed of unit-tests. Meet mock-couch- a node.js module which pretends to be a CouchDB server for testing purposes.",
    "cover": "cover.jpg",
    "date": "2015-07-04T20:30:00.000Z",
    "author": {
      "name": "Justas Azna",
      "gplus": "https://www.google.com/+JustasAzna?rel=author",
      "photo": "src/assets/img/team/fadeit_team_justas_azna.jpg",
      "job_title": "Software engineer"
    },
    "content": [
      {
        "type": "h",
        "text": "Prerequisites"
      },
      {
        "type": "p",
        "text": "The code in this post is based upon CoffeeScript, Mocha and Gulp but it should be easily adaptable to other stacks (e.g. JavaScript, Jasmine and Grunt)."
      },
      {
        "type": "h",
        "text": "Intro"
      },
      {
        "type": "p",
        "text": "Recently, I worked on a Express.js based RESTful API with CouchDB storage. For various reasons, I mostly had end-to-end tests (testing HTTP endpoints) and very few unit tests. In the tests, I would rebuild the database before every \"describe\" block. This worked quite well but at one point I noticed that my feedback loops were beginning to get tediously slow (~30 seconds to run the full test suite). Thankfully, I discovered mock-couch: in-memory storage with CouchDB API. The switch was rather easy and, as a result, my test suite would finish in less than 10 seconds (even when reseting test data before each test)."
      },
      {
        "type": "h",
        "text": "Setup"
      },
      {
        "type": "p",
        "text": "Our sample api will expose functionality to manipulate a database of sofa's. Let's set it up."
      },
      {
        "type": "p",
        "text": "Structure and dependencies"
      },
      {
        "type": "code",
        "language": "bash",
        "file": "bootstrap.bash"
      },
      {
        "type": "p",
        "text": "gulpfile.coffee"
      },
      {
        "type": "code",
        "language": "coffeescript",
        "file": "1/gulpfile.coffee"
      },
      {
        "type": "p",
        "text": "server.coffee"
      },
      {
        "type": "code",
        "language": "coffeescript",
        "file": "1/server.coffee"
      },
      {
        "type": "p",
        "text": "Let's create file <i>specs/sofas.spec.coffee</i> which is going to contain our tests."
      },
      {
        "type": "code",
        "language": "coffeescript",
        "file": "1/specs/sofas.spec.coffee"
      },
      {
        "type": "p",
        "text": "If you run the tests right now, you should see similar output:"
      },
      {
        "type": "code",
        "language": "bash",
        "file": "1/test-run.txt"
      },
      {
        "type": "h",
        "text": "Database Model"
      },
      {
        "type": "p",
        "text": "Sofas will be stored in CouchDB with the following structure:"
      },
      {
        "type": "code",
        "language": "javascript",
        "file": "sofa.json.txt"
      },
      {
        "type": "p",
        "text": "With this in mind, let's build a module for accessing the database."
      },
      {
        "type": "code",
        "language": "coffeescript",
        "file": "2/dal.coffee"
      },
      {
        "type": "p",
        "text": "What's missing is the actual endpoints and tests for them. Let's start with the tests."
      },
      {
        "type": "code",
        "language": "coffeescript",
        "file": "2/specs/sofas.spec.coffee"
      },
      {
        "type": "p",
        "text": "Now the endpoints:"
      },
      {
        "type": "code",
        "language": "coffeescript",
        "file": "2/server.coffee"
      },
      {
        "type": "p",
        "text": "At this point we can execute <em>gulp test-int</em> command to run tests on real CouchDB:"
      },
      {
        "type": "code",
        "language": "coffeescript",
        "file": "2/test-int-run.txt"
      },
      {
        "type": "h",
        "text": "mock-couch tests"
      },
      {
        "type": "p",
        "text": "So how do we use mock-couch for this? Mock-couch is an HTTP server based on Restify. Note that Node.js runtime is single-threaded so we won't be able to run both express and mock-couch at the same time. However, it is possible to run mock-couch on another process."
      },
      {
        "type": "p",
        "text": "Node provides a couple of ways to create processes out of the box. We'll use one called <em>forking</em>: not only we'll be able to control the lifecycle of the forked child process we'll also be able to do send and receive messages between parent and the child."
      },
      {
        "type": "p",
        "text": "OK, less talk and more forking. We'll do the forking in \"gulp test\" task:"
      },
      {
        "type": "code",
        "language": "coffeescript",
        "file": "3/gulpfile.coffee"
      },
      {
        "type": "p",
        "text": "And a slight change to the test setup:"
      },
      {
        "type": "code",
        "language": "coffeescript",
        "file": "3/specs/sofas.spec.coffee"
      },
      {
        "type": "h",
        "text": "Moment of Truth"
      },
      {
        "type": "p",
        "text": "If you try running <em>gulp test</em> right now, you should see similar output:"
      },
      {
        "type": "code",
        "language": "coffeescript",
        "file": "3/test-run.txt"
      },
      {
        "type": "p",
        "text": "As you can see the tests completed slightly faster than with real CouchDB. In a small code base like this, it's hardly worth switching to mock-couch, if execution speed is your only motivation. However, with bigger codebases, the speed improvement become very apparent."
      },
      {
        "type": "p",
        "text": "Besides speed, there's another benefit to this approach: you don't actually need CouchDB to test your project. The simplified build process is especially useful with Continuous Integration platforms like Travis-CI and Codeship."
      },
      {
        "type": "h",
        "text": "Resources"
      },
      {
        "type": "p",
        "text": ""
      },
      {
        "type": "list",
        "items": {
            "0": "Code",
            "1": "mock-couch"
        }
      }
    ]
  }
]
