/*
 * Use some kind of JavaScript/JSON syntax highlighter,
 * otherwise you'll have a bad time.
 *
 * The data format for blog posts is JSON
 * (no comments/break lines, etc allowed in a real post)
 *
 * Check/fix if it's not valid on:
 * http://jsonformatter.curiousconcept.com/
 *
 * There's a Grunt task which will also validate the post JSON.
 */
[
  {
    /*
     * BEGIN LIST DATA
     *
     * List data represents the post 'meta'.
     * All the properties are required and can only be text.
     * You need to duplicate the meta in post-list.json to display your post in the index.
     * (feel free to implement a better solution if it gets rid of the duplicate data)
     */

    /*
     * @id
     *
     * The JSON file holding the post content will be called 'content.json'
     *
     * Ids should be at least 3 words long.
     * Place this file in src/posts/your-post-id/content.json for consistency.
     *
     * The id is also the default location for the post cover.
     * Place you cover in src/posts/your-post-id/cover.jpg
     * You can rename it below.
     *
     */
    "id": "fadeit-blog-is-live", //The post id is also the url: fadeit.dk/post/@id
    "title": "Blog: open for business", //Post title (<h1>) and meta title (<title>)
    "intro": "We're super excited to launch a blog section on our website. We'll be writing about design, tech, code and everything in between.", //Post intro and meta description
    "cover": "cover.jpg",
    "no_related": "false", //Or don't include this property. If it's true, then the next and previous links won't be shown at the bottom of the post
    "date": "2015-03-07T19:28:14.465Z", //console.log(JSON.stringify(new Date()));
    "author": {
      "name": "Dan Mindru",
      "gplus": "https://plus.google.com/+MindruDan?rel=author",
      "photo": "src/assets/img/team/fadeit_team_dan_mindru.jpg", //get your photo URL from the team page or hack the filename
      "job_title": "Experience designer"
    },
    /*
     * END LIST DATA
     */

    /*
     * BEGIN POST CONTENT
     * A loop will evaluate each object in the content Array and create the appropriate HTML markup
     *
     * Content can be: p (paragraph), h (heading), quote, list, cover (stretched/as wide as the article image), img (normal image), video, code and fake-table.
     * Paragraphs can contain html elements (other )
     *
     */
    "content": [
      {
        "type": "p",
        "text": "Here's <b>text</b>" //HTML is allowed
      },
      {
        "type": "h",
        "number": 2, //this will be a <h2>, also works with 2, 3, 4, 5, 6. Default is 2.
        "text": "Here's a heading" //HTML is allowed if *really* needed
      },
      {
        "type": "quote",
        "text": "Quote text",
        "ref": "https://support.google.com/webmasters/answer/182192", //reference to your quote
        "reverse": false //optional, will float elements to right
      },
      {
        "type": "cover", //a image that stretches to cover the entire screen width - ask Dan for cover images, he has some prepared
        "height": 520, //required
        "url": "posts/your-post-id/read.jpg", //you need to specify the full path for images, that means they can also be hosted somewhere else
        "caption": "Here's a image" //optional, but will be displayed as the 'alt' attribute. HTML NOT allowed
      },
      {
        "type": "img", //a image that will not stretch outside the body of the post
        "url": "posts/your-post-id/read.jpg", //same as cover
        "caption": "Here's a image" //same as cover
        //doesn't need height
      },
      {
        "type": "video",
        "vendor": "youtube", //a youtube video
        "height": 520,
        "url": "https://www.youtube.com/embed/z33tH-JdPDg",
        "caption": "Here's a video" //optional
      },
      {
        "type": "video",
        "vendor": "vimeo", //a vimeo video
        "height": 520,
        "url": "https://player.vimeo.com/video/29469155?color=0fade1",
        "caption": "Here's a video" //optional
      },
      {
        "type": "code", //a code block
        "language": "javascript", //language of the code, see http://prismjs.com/download.html#category-languages for a full list of languages
        "file": "sample.code.txt" //the file to load the code block from. Place it in /posts/your-post-id/sample.code.txt
      },
      {
        "type": "list", //ordered list
        "items": { //list items, accepts HTML
          "0": "Group by type",
          "1": "Order by line length",
          "2": "Alphabetise"
        }
      },
      /*
       * Fake table is a column-based configurable grid.
       * You can set the size of each column (24 total).
       * The size of the header should match your column sizes.
       */
      {
        "type": "fake-table",
        /*
         * Table
         */
        "largeCode": true, //displays larger code
        "header": {
          "0": {
            "size": "12", //50% width
            "text": "Table head 1"
          },
          "1": {
            "size": "12", //50% width
            "text": "Table head 2"
          }
        },
        /*
         * Rows are just a column wrapper.
         * They act as a 'break' line for columns.
         */
        "rows": {
          "0": {
            /*
             * Columns are where the content is inserted.
             * Each column can have multiple content objects.
             * (for example one column-content object contains a title, a code block and a block of text)
             *
             * Fake-table columns suppor 3 types of content:
             * type: title -> a bolded title
             * type: code  -> a block of code, same as the code block
             *                described above
             * type: p     -> a text block, accepts HTML elements
             *
             */
            "columns": {
              "0": {
                "size": "12", //50% width, should match header
                "content": {
                  "0": {
                    "type": "title",
                    "text": "My title"
                  },
                  "1": {
                    "type": "code",
                    "language": "javascript",
                    "file": "code.txt.sample"
                  }
                }
              },
              "1": {
                "size": "12",
                "content": {
                  "0": {
                    "type": "title",
                    "text": "Another title"
                  },
                  "1": {
                    "type": "code",
                    "language": "python",
                    "file": "python-code.txt.sample"
                  },
                  "2": {
                    "type": "p",
                    "text": "Text block..."
                  }
                }
              }
            }
          }
        }
      }
    ]
  }
]
